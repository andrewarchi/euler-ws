# Project Euler
# Problem 17: Number letter counts
# https://projecteuler.net/problem=17

    # 1-9
    3  # one
    3+ # two
    5+ # three
    4+ # four
    4+ # five
    3+ # six
    5+ # seven
    5+ # eight
    4+ # nine

    # 1-19
    ^
    3+ # ten
    6+ # eleven
    6+ # twelve
    8+ # thirteen
    8+ # fourteen
    7+ # fifteen
    7+ # sixteen
    9+ # seventeen
    8+ # eighteen
    8+ # nineteen

    # 20-99
    ^1 8*
    6  # twenty
    6+ # thirty
    5+ # forty
    5+ # fifty
    5+ # sixty
    7+ # seventy
    6+ # eighty
    6+ # ninety
    10* +

    # 1-99
    +

    # 100-999
    ^
    3 99*  + # and
    7 100* + # hundred
    9*
    ^2 100* +

    # 1-1000
    +
    11+ # one thousand

    printi drop end

# Generalized approach:

    0  0 store # zero
    1  3 store # one
    2  3 store # two
    3  5 store # three
    4  4 store # four
    5  4 store # five
    6  3 store # six
    7  5 store # seven
    8  5 store # eight
    9  4 store # nine
    10 3 store # ten
    11 6 store # eleven
    12 6 store # twelve
    13 8 store # thirteen
    14 8 store # fourteen
    15 7 store # fifteen
    16 7 store # sixteen
    17 9 store # seventeen
    18 8 store # eighteen
    19 8 store # nineteen

    20 6 store # twenty
    21 6 store # thirty
    22 5 store # forty
    23 5 store # fifty
    24 5 store # sixty
    25 7 store # seventy
    26 6 store # eighty
    27 6 store # ninety

    1000
    0
.sum_loop:
    ^1 call number_letter_count +
    swap 1- ^ jz .end swap
    jmp .sum_loop
.end:
    drop printi end

# number_letter_count counts the number of letters in the spelling of
# the number (not including spaces or hyphens).
# (n -- count)
number_letter_count:
    ^ jz .number_letter_count_0
    ^ jn .number_letter_count_neg
.number_letter_count:
    ^ 1000000000000000 j< .number_letter_count_trillions
    drop 0 ret
.number_letter_count_trillions:
    ^ 1000000000000 j< .number_letter_count_billions
    ^ 1000000000000% call .number_letter_count_billions
    swap 1000000000000/ call .number_letter_count_hundreds +
    8+ ret # "trillion"
.number_letter_count_billions:
    ^ 1000000000 j< .number_letter_count_millions
    ^ 1000000000% call .number_letter_count_millions
    swap 1000000000/ call .number_letter_count_hundreds +
    7+ ret # "billion"
.number_letter_count_millions:
    ^ 1000000 j< .number_letter_count_thousands
    ^ 1000000% call .number_letter_count_thousands
    swap 1000000/ call .number_letter_count_hundreds +
    7+ ret # "million"
.number_letter_count_thousands:
    ^ 1000 j< .number_letter_count_hundreds
    ^ 1000% call .number_letter_count_hundreds
    swap 1000/ call .number_letter_count_hundreds +
    8+ ret # "thousand"
.number_letter_count_hundreds:
    ^ 100 j< .number_letter_count_tens
    ^ 100% jz .number_letter_count_hundreds_no_and
    ^ 100% call .number_letter_count_tens
    swap 100/ retrieve +
    10+ ret # "hundred and"
.number_letter_count_hundreds_no_and:
    100/ retrieve 7+ ret # "hundred"
.number_letter_count_tens:
    ^ 20 j< .number_letter_count_under20
    ^ 10% retrieve # ones
    swap 10/ 18+ retrieve + # tens
    ret
.number_letter_count_under20:
    retrieve ret
.number_letter_count_0:
    drop 4 ret # "zero"
.number_letter_count_neg:
    call .number_letter_count
    8+ ret # "negative"
