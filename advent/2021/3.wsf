# Advent of Code 2021
# Day 3: Binary Diagnostic
# https://adventofcode.com/2021/day/3

    "@array"  import
    "@bool"   import
    "@int"    import
    "@math"   import
    "@string" import

    0 ^ readi retrieve # numbers
    0 ^ readi retrieve # bits
    0
.read_loop:
    ^ ^ 2 call int.read_base jz .read_error store
    1+
    ^ ^3 j< .read_loop
    drop
    0 ^2 call array.quicksort

    # Part 1
    0 0 # i epsilon
.part1_loop_bits: # IVs: i epsilon
    2 ^2 call math.exp # 1 << i
    0 0 # j count
.part1_loop_numbers: # IVs: j count
    # numbers bits i epsilon 1<<i j count
    ^1 retrieve ^3 / 2% + # count += (nums[j]>>i)&1
    swap 1+ swap
    ^1 ^7 j< .part1_loop_numbers # j < numbers
    1slide
    ^5 2/ < * + # epsilon += (count < numbers/2) << i
    # numbers bits i epsilon
    swap 1+ swap
    ^1 ^3 j< .part1_loop_bits # i < bits
    1slide
    # numbers bits epsilon

    2 ^2 call math.exp 1- ^1 - # gamma = ((1<<bits)-1)&^epsilon
    * printi '\n' printc # gamma * epsilon
    2drop end

.read_error:
    -1 "Error: invalid binary format"
    call string.println_neg_stack 2drop end
