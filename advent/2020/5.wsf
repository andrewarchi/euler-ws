# Advent of Code 2020
# Day 5: Binary Boarding
# https://adventofcode.com/2020/day/5

    "@math"         import
    "@types/char"   import
    "@types/string" import

    0 ^ readi retrieve
    0
.loop:
    swap 1- ^ jn .end swap
    0 'F' 'B' 7 call read_binary jz .read_error 8*
    0 'L' 'R' 3 call read_binary jz .read_error +
    0 '\n' call char.read_expect jz .read_error
    call math.max
    jmp .loop
.end:
    drop printi '\n' printc end

# read_binary reads a fixed-length binary number with ch0 for 0 and ch1
# for 1. Clobbers the given address.
# (addr ch0 ch1 len -- n ok?)
read_binary:
    0
.read_binary_loop:
    swap 1- swap
    ^1 jn .read_binary_ret
    2*
    ^4 ^ readc retrieve
    ^ ^5 j= .read_binary_0
    ^3 j= .read_binary_1
    4slide 0 ret # error
.read_binary_0:
    drop jmp .read_binary_loop
.read_binary_1:
    1+ jmp .read_binary_loop
.read_binary_ret:
    4slide 1 ret

# (x -- )
.read_error:
    -1 "Error: invalid format\n" call string.print_neg_stack
    2drop end
